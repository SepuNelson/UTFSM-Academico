#!/bin/bash

echo "üöÄ Configurando workspace Tarea 3 - ETL Fan Engagement HRL"
echo "=================================================="

# Funci√≥n para mostrar el progreso
show_progress() {
    echo "üìã $1"
}

# Funci√≥n para verificar si un comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Funci√≥n para esperar a que un servicio est√© disponible
wait_for_service() {
    local service_name=$1
    local service_url=$2
    local max_attempts=30
    local attempt=1
    
    show_progress "Esperando a que $service_name est√© disponible..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s -f "$service_url" >/dev/null 2>&1; then
            echo "‚úÖ $service_name est√° disponible"
            return 0
        fi
        
        echo "‚è≥ Intento $attempt/$max_attempts - $service_name no est√° listo a√∫n..."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    echo "‚ùå $service_name no est√° disponible despu√©s de $max_attempts intentos"
    return 1
}

# Verificar que estamos en el directorio correcto
show_progress "Verificando directorio de trabajo..."
if [ ! -f "requirements.txt" ] || [ ! -f "tarea3.md" ]; then
    echo "‚ùå Error: No se encontraron archivos del proyecto. Aseg√∫rate de estar en el directorio correcto."
    exit 1
fi
echo "‚úÖ Directorio correcto"

# Verificar Python
show_progress "Verificando Python..."
if command_exists python; then
    echo "‚úÖ Python encontrado: $(python --version)"
else
    echo "‚ùå Python no encontrado"
    exit 1
fi

# Verificar pip
show_progress "Verificando pip..."
if command_exists pip; then
    echo "‚úÖ pip encontrado"
else
    echo "‚ùå pip no encontrado"
    exit 1
fi

# Instalar dependencias
show_progress "Instalando dependencias de Python..."
echo "üì¶ Actualizando pip..."
pip install --upgrade pip

echo "üì¶ Instalando dependencias desde requirements.txt..."
pip install -r requirements.txt

if [ $? -eq 0 ]; then
    echo "‚úÖ Dependencias instaladas exitosamente!"
else
    echo "‚ùå Error instalando dependencias"
    exit 1
fi

# Verificar instalaciones
show_progress "Verificando instalaciones..."

echo "üîç Verificando Apache Beam..."
python -c "import apache_beam; print('‚úÖ Apache Beam instalado')" 2>/dev/null || echo "‚ùå Apache Beam no instalado"

echo "üîç Verificando Airflow..."
python -c "import airflow; print('‚úÖ Airflow instalado')" 2>/dev/null || echo "‚ùå Airflow no instalado"

echo "üîç Verificando Kafka..."
python -c "import kafka; print('‚úÖ Kafka instalado')" 2>/dev/null || echo "‚ùå Kafka no instalado"

echo "üîç Verificando FastAvro..."
python -c "import fastavro; print('‚úÖ FastAvro instalado')" 2>/dev/null || echo "‚ùå FastAvro no instalado"

# Verificar archivos del proyecto
show_progress "Verificando archivos del proyecto..."

required_files=(
    "data/fan_engagement.jsonl"
    "schemas/fan_engagement_schema.json"
    "src/beam/fan_engagement_etl.py"
    "dags/fan_engagement_dag.py"
    "src/settings.py"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file (no encontrado)"
    fi
done

# Verificar servicios Docker si est√°n disponibles
show_progress "Verificando servicios Docker..."

# Verificar si Docker est√° disponible
if command_exists docker; then
    echo "‚úÖ Docker encontrado"
    
    # Verificar si los contenedores est√°n ejecut√°ndose
    if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q "ws-airflow-webserver"; then
        echo "‚úÖ Contenedor ws-airflow-webserver est√° ejecut√°ndose"
    else
        echo "‚ö†Ô∏è  Contenedor ws-airflow-webserver no est√° ejecut√°ndose"
    fi
    
    if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q "ws-kafka"; then
        echo "‚úÖ Contenedor ws-kafka est√° ejecut√°ndose"
    else
        echo "‚ö†Ô∏è  Contenedor ws-kafka no est√° ejecut√°ndose"
    fi
    
    if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q "ws-minio"; then
        echo "‚úÖ Contenedor ws-minio est√° ejecut√°ndose"
    else
        echo "‚ö†Ô∏è  Contenedor ws-minio no est√° ejecut√°ndose"
    fi
else
    echo "‚ö†Ô∏è  Docker no est√° disponible en este entorno"
fi

# Ejecutar pruebas
show_progress "Ejecutando pruebas del pipeline..."
python test_pipeline.py

# Ejecutar verificaci√≥n completa
show_progress "Ejecutando verificaci√≥n completa del workspace..."
python verify-setup.py

# Mostrar informaci√≥n de servicios
echo ""
echo "üåê Informaci√≥n de servicios disponibles:"
echo "========================================"
echo "üåê Airflow Web UI: http://localhost:8081"
echo "   Usuario: airflow"
echo "   Contrase√±a: airflow"
echo ""
echo "üåê Kafka UI: http://localhost:8080"
echo "üåê MinIO: http://localhost:9000"
echo "   Usuario: minio-root-user"
echo "   Contrase√±a: minio-root-password"
echo "üåê MinIO Console: http://localhost:9001"
echo ""
echo "üì° Kafka Broker: localhost:9092"
echo "üì° Kafka Broker (Docker): localhost:29092"

# Mostrar comandos √∫tiles
echo ""
echo "üìö Comandos √∫tiles:"
echo "=================="
echo "  ‚Ä¢ Ejecutar pipeline manualmente:"
echo "    python src/beam/fan_engagement_etl.py --input data/fan_engagement.jsonl --output output/fan_engagement --schema schemas/fan_engagement_schema.json"
echo ""
echo "  ‚Ä¢ Ejecutar pruebas:"
echo "    python test_pipeline.py"
echo ""
echo "  ‚Ä¢ Verificar configuraci√≥n:"
echo "    python verify-setup.py"
echo ""
echo "  ‚Ä¢ Ver logs de Airflow:"
echo "    docker logs ws-airflow-webserver"
echo "    docker logs ws-airflow-scheduler"
echo ""
echo "  ‚Ä¢ Ver logs de Kafka:"
echo "    docker logs ws-kafka"
echo ""
echo "  ‚Ä¢ Verificar estado de contenedores:"
echo "    docker ps"
echo ""
echo "  ‚Ä¢ Reiniciar servicios:"
echo "    docker-compose -f .devcontainer/docker-compose.yml restart"

echo ""
echo "üéâ ¬°Workspace configurado exitosamente!"
echo "üöÄ Puedes comenzar a trabajar en tu proyecto."
echo ""
echo "üí° Consejo: Si los servicios no est√°n disponibles inmediatamente,"
echo "   espera unos minutos a que todos los contenedores se inicialicen completamente." 